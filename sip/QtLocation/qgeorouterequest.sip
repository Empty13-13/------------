// qgeorouterequest.sip generated by MetaSIP
//
// This file is part of the QtLocation Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QGeoRouteRequest
{
%TypeHeaderCode
#include <qgeorouterequest.h>
%End

public:
    enum TravelMode /PyName=TravelModes,BaseType=Flag/
    {
        CarTravel,
        PedestrianTravel,
        BicycleTravel,
        PublicTransitTravel,
        TruckTravel,
    };

    typedef QFlags<QGeoRouteRequest::TravelMode> TravelModes;

    enum FeatureType /PyName=FeatureTypes,BaseType=Flag/
    {
        NoFeature,
        TollFeature,
        HighwayFeature,
        PublicTransitFeature,
        FerryFeature,
        TunnelFeature,
        DirtRoadFeature,
        ParksFeature,
        MotorPoolLaneFeature,
        TrafficFeature,
    };

    typedef QFlags<QGeoRouteRequest::FeatureType> FeatureTypes;

    enum FeatureWeight /PyName=FeatureWeights,BaseType=Flag/
    {
        NeutralFeatureWeight,
        PreferFeatureWeight,
        RequireFeatureWeight,
        AvoidFeatureWeight,
        DisallowFeatureWeight,
    };

    typedef QFlags<QGeoRouteRequest::FeatureWeight> FeatureWeights;

    enum RouteOptimization /PyName=RouteOptimizations,BaseType=Flag/
    {
        ShortestRoute,
        FastestRoute,
        MostEconomicRoute,
        MostScenicRoute,
    };

    typedef QFlags<QGeoRouteRequest::RouteOptimization> RouteOptimizations;

    enum SegmentDetail /PyName=SegmentDetails,BaseType=Flag/
    {
        NoSegmentData,
        BasicSegmentData,
    };

    typedef QFlags<QGeoRouteRequest::SegmentDetail> SegmentDetails;

    enum ManeuverDetail /PyName=ManeuverDetails,BaseType=Flag/
    {
        NoManeuvers,
        BasicManeuvers,
    };

    typedef QFlags<QGeoRouteRequest::ManeuverDetail> ManeuverDetails;
    explicit QGeoRouteRequest(const QList<QGeoCoordinate> &waypoints = QList<QGeoCoordinate>());
    QGeoRouteRequest(const QGeoCoordinate &origin, const QGeoCoordinate &destination);
    QGeoRouteRequest(const QGeoRouteRequest &other);
    ~QGeoRouteRequest();
    bool operator==(const QGeoRouteRequest &other) const;
    bool operator!=(const QGeoRouteRequest &other) const;
    void setWaypoints(const QList<QGeoCoordinate> &waypoints);
    QList<QGeoCoordinate> waypoints() const;
    void setExcludeAreas(const QList<QGeoRectangle> &areas);
    QList<QGeoRectangle> excludeAreas() const;
    void setNumberAlternativeRoutes(int alternatives);
    int numberAlternativeRoutes() const;
    void setTravelModes(QGeoRouteRequest::TravelModes travelModes);
    QGeoRouteRequest::TravelModes travelModes() const;
    void setFeatureWeight(QGeoRouteRequest::FeatureType featureType, QGeoRouteRequest::FeatureWeight featureWeight);
    QGeoRouteRequest::FeatureWeight featureWeight(QGeoRouteRequest::FeatureType featureType) const;
    QList<QGeoRouteRequest::FeatureType> featureTypes() const;
    void setRouteOptimization(QGeoRouteRequest::RouteOptimizations optimization);
    QGeoRouteRequest::RouteOptimizations routeOptimization() const;
    void setSegmentDetail(QGeoRouteRequest::SegmentDetail segmentDetail);
    QGeoRouteRequest::SegmentDetail segmentDetail() const;
    void setManeuverDetail(QGeoRouteRequest::ManeuverDetail maneuverDetail);
    QGeoRouteRequest::ManeuverDetail maneuverDetail() const;
    void setWaypointsMetadata(const QList<QVariantMap> &waypointMetadata);
    QList<QVariantMap> waypointsMetadata() const;
    void setExtraParameters(const QVariantMap &extraParameters);
    QVariantMap extraParameters() const;
    void setDepartureTime(const QDateTime &departureTime);
    QDateTime departureTime() const;
};
